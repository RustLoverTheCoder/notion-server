//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2
use async_graphql::*;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "user")]
#[graphql(concrete(name = "user", params()))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub disabled: bool,
    pub email: Option<String>,
    pub avatar_url: Option<String>,
    pub locale: Option<String>,
    pub phone_number: Option<String>,
    pub password_hash: Option<String>,
    pub email_verified: Option<bool>,
    pub phone_number_verified: Option<bool>,
    pub metadata: Option<sea_orm::entity::prelude::Json>,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub settings_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn find_by_id(id: i32) -> Select<Entity> {
        Self::find().filter(Column::Id.eq(id))
    }

    pub fn find_by_email(email: &str) -> Select<Entity> {
        Self::find().filter(Column::Email.eq(email))
    }

    pub fn find_by_phone_number(phone_number: &str) -> Select<Entity> {
        Self::find().filter(Column::PhoneNumber.eq(phone_number))
    }
}